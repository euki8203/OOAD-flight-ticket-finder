{"version":3,"sources":["Home.js","View.js","Submit.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","alt","src","width","height","Component","View","props","state","undefined","location","origin","destination","destinationCountry","price","depatureDate","returnDate","isLoading","flights","sortBehavior","fetch","this","mode","then","response","json","data","status","res","setState","alert","ID","carrier","Carriers","map","el","CarrierId","Name","Quotes","sort","a","b","parseInt","MinPrice","Date","OutboundLeg","DepartureDate","date","newdate","getFullYear","getMonth","getDate","filter","filterFlights","length","console","log","sortFlights","key","QuoteId","getCarrierLogo","CarrierIds","replaceCarrier","getOrigin","getDestination","Currencies","Symbol","convertDate","checkLength","renderFlights","Submit","handleChange","event","preventDefault","target","id","value","someDate","setDate","toISOString","split","Direct","QuoteDateTime","type","name","onChange","placeholder","min","minDate","to","pathname","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.52959c2b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n \nclass Home extends Component {\n  render() {\n    return (\n        <div className=\"header\">\n          <h2> OOAD Final Project</h2>\n          <h3> Ashley Kim & Elizabeth Qiu</h3>\n          <p>\n            This app matches users with flights using data from the Skyscanner api.\n          </p>\n          <img alt=\"Plane logo\" src=\"./plane_logo.png\"\n          width=\"300\" height=\"300\"/>\n        </div>\n    );\n  }\n}\n \nexport default Home;","import React, { Component } from \"react\";\n\nclass View extends Component {\n\tconstructor(props) {\n    super(props);\n\n    this.state = (this.props.location.state === undefined) ?\n    {\n      origin: undefined,\n      destination: undefined,\n      destinationCountry: undefined,\n      price: undefined,\n      depatureDate: undefined,\n      returnDate: undefined,\n      isLoading: true,\n      flights: [],\n      sortBehavior: undefined\n    }: this.props.location.state;\n  }\n\n\n  async componentDidMount(){\n  \ttry{\n      await fetch(`findFlight?inboundDate=${this.state.returnDate}&originPlace=${this.state.origin}&destinationPlace=${this.state.destination}&outboundDate=${this.state.depatureDate}&country=${this.state.destinationCountry}`, {mode: 'no-cors'})\n      .then(response => \n          response.json().then(data => ({\n              data: data,\n              status: response.status,\n          })\n      ).then(res => {\n          this.setState({ \n            flights: res.data,\n            isLoading: false\n          })\n          //console.log(this.state.flights)\n    }));\n    }catch (e) {\n      alert(e);\n    }\n\n  }\n\n  replaceCarrier(ID) {\n    var carrier = ID;\n    this.state.flights.Carriers.map(el => {\n      if (ID == el.CarrierId) {\n        carrier = el.Name;\n      }\n    });\n\n    return carrier;\n  }\n\n  getCarrierLogo(ID) {\n    if (ID == \"881\"){\n      return \"./british_logo.png\";\n    }\n    else if (ID == \"851\"){\n      return \"./alaska_logo.png\";\n    }\n    else if (ID == \"1793\"){\n      return \"./united_logo.png\";\n    }\n    else if (ID == \"1065\"){\n      return \"./frontier_logo.png\";\n    }\n    else if (ID == \"1467\"){\n      return \"./spirit_logo.png\";\n    }\n    else {\n      return \"./plane_logo.png\";\n    }\n  }\n\n  sortFlights(sortBehavior) {\n    if (sortBehavior == \"price\"){\n      this.state.flights.Quotes.sort(function(a,b) { return parseInt(a.MinPrice)-parseInt(b.MinPrice)});\n    }\n    else if (sortBehavior == \"time\"){\n      this.state.flights.Quotes.sort(function(a,b) {\n        var date1 = new Date(a.OutboundLeg.DepartureDate);\n        var date2 = new Date(b.OutboundLeg.DepartureDate);\n        return date1-date2;\n      });\n    }\n\n  }\n\n  convertDate(date) {\n    var newdate = new Date(date);\n    return newdate.getFullYear()+'-' + (newdate.getMonth()+1) + '-'+newdate.getDate();\n  }\n\n  getOrigin() {\n    var ret = (this.state.origin == undefined) ? \"DEN\" : this.state.origin;\n    return ret;\n  }\n\n  getDestination() {\n    var ret = (this.state.destination == undefined) ? \"SFO\" : this.state.destination;\n    return ret;\n  }\n\n  filterFlights() {\n    var ret = (this.state.price == undefined) ? this.state.flights.Quotes :\n    this.state.flights.Quotes.filter(el => {\n      if (el.MinPrice <= this.state.price) {\n        return el;\n      }\n    });\n\n    return ret;\n  }\n\n  checkLength() {\n    if (this.filterFlights().length == 0) { return \"No Flights Available\"}\n  }\n\n  renderFlights() {\n    console.log(this.state);\n    return(\n    <div>\n      {this.sortFlights(this.state.sortBehavior)}\n      <div className =\"quote-container\">\n      {this.filterFlights().map(el => (\n        <li key={el.QuoteId} className = \"quote\">\n        <div>\n          <img src={this.getCarrierLogo(el.OutboundLeg.CarrierIds)}\n          width=\"50\" height=\"50\"/>\n        </div>\n        <h2>{this.replaceCarrier(el.OutboundLeg.CarrierIds)} &nbsp;</h2>\n        <h3>{this.getOrigin()} to {this.getDestination()} &nbsp;</h3>\n        <p>\n        Price: {this.state.flights.Currencies[0].Symbol}{el.MinPrice} &nbsp;\n        Departure Date: {this.convertDate(el.OutboundLeg.DepartureDate)}\n        </p>\n        <br></br>\n        </li>\n      ))}\n      {this.checkLength()}\n      </div>\n    </div>)\n  }\n\n  render() {\n    return (\n    <div className = \"center\">\n    {this.state.isLoading === false ? this.renderFlights() : \"Loading\"}\n    </div>\n    );\n  }\n}\n \nexport default View;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n \n // TO DO: css. make it look pretty\n // TO DO: link OutboundLeg.CarrierIds to logos of the airline\n // TO DO: get currency symbol\n\nclass Submit extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      origin: undefined,\n      destination: undefined,\n      destinationCountry:undefined,\n      price: undefined,\n      depatureDate: undefined,\n      returnDate: undefined,\n      isLoading: true,\n      flights: [],\n      sortBehavior: \"price\"\n    };\n  }\n\n\n  handleChange = event => {\n    event.preventDefault();\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n\n    // console.log(event.target.id,\": \", event.target.value)\n  }\n\n  async handleClick() {\n    try{\n      await fetch(`findFlight?inboundDate=${this.state.returnDate}&originPlace=${this.state.origin}&destinationPlace=${this.state.destination}&outboundDate=${this.state.depatureDate}&country=${this.state.destinationCountry}`, {mode: 'no-cors'})\n      .then(response => \n          response.json().then(data => ({\n              data: data,\n              status: response.status,\n          })\n      ).then(res => {\n          this.setState({ \n            flights: res.data,\n            isLoading: false\n          })\n          // console.log(this.state.flights)\n    }));\n    }catch (e) {\n      alert(e);\n    }\n  }\n\n  minDate(){\n    var someDate = new Date();\n    var numberOfDaysToAdd = 1;\n    someDate.setDate(someDate.getDate() + numberOfDaysToAdd)\n    return someDate.toISOString().split(\"T\")[0];\n  }\n\n  renderFlights(){\n    return this.state.flights.Quotes.map(el => (\n      <li key={el.QuoteId}>\n      {el.QuoteId}: {el.MinPrice}, {el.Direct}, {el.QuoteDateTime}\n       </li>\n    ))\n  }\n\n\n  render() {\n    return (\n      <div className=\"submit\">\n        <form>\n          <label>Origin (ex. DEN, DFW) </label>\n              <input type=\"text\" id=\"origin\" name=\"origin\" value={this.state.origin} onChange={this.handleChange}/>\n        </form>\n        <form>\n          <label>Destination (ex. SFO, ORD) </label>\n              <input type=\"text\" id=\"destination\" name=\"destination\" value={this.state.destination} onChange={this.handleChange}/>\n        </form>\n        <form>\n          <label>Destination Country (ex. US) </label>\n              <input type=\"text\" id=\"destinationCountry\" name=\"destinationCountry\" value={this.state.destinationCountry} onChange={this.handleChange}/>\n        </form>\n        <form>\n              <label>Maximum Price </label>\n              <input type=\"number\" id=\"price\" name=\"price\" placeholder=\"Price...\" value={this.state.price} onChange={this.handleChange}/>\n        </form>\n        <form>\n              <p> Departure Dates </p>\n              <label> From </label>\n              <input type=\"date\" min={new Date().toISOString().split(\"T\")[0]} id=\"depatureDate\" name=\"depatureDate\" value={this.state.depatureDate} onChange={this.handleChange}/>\n        </form>\n        <form>\n              <label>To </label>\n              <input type=\"date\" min={this.minDate()} id=\"returnDate\" name=\"returnDate\" value={this.state.returnDate} onChange={this.handleChange}/>\n         </form>\n         <form>\n          <label> Sort by: </label>\n          <select id=\"sortBehavior\" value = {this.state.sortBehavior} onChange={this.handleChange}>\n            <option value=\"price\">Price</option>\n            <option value=\"time\">Time</option>\n          </select>\n        </form>\n      <div>\n        <Link to={{ \n            pathname: '/View', \n            state: this.state\n          }}>\n          <button className=\"select_button\">\n              Submit\n          </button>\n          </Link>\n      </div>\n      </div>\n      \n    );\n  }\n}\n \nexport default Submit;","import React, { Component } from 'react';\nimport './App.css';\nimport { Route, Link, HashRouter, Switch } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport View from \"./View\";\nimport Submit from \"./Submit\";\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div>\n          <div className=\"header\">\n            <img alt=\"Plane logo\" src=\"./plane_logo.png\"\n            width=\"70\" height=\"70\"/>\n            <h1> Flight Ticket Finder</h1>\n            <Link to=\"/\" className=\"select_button\">About</Link>\n            <Link to=\"/View\" className=\"select_button\">View Flight Options</Link>\n            <Link to=\"/Submit\" className=\"select_button\">Enter Flight Information</Link>\n          </div>\n          <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/View\" component={View}/>\n            <Route path=\"/Submit\" component={Submit}/>\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n \nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}